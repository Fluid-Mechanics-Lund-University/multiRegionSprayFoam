UDFAMR
{
	type coded;
	functionObjectLibs ( "libutilityFunctionObjects.so" );
	enabled true;
	name UDFAMR;
	executeControl  timeStep;
	writeControl    writeTime;
	
	codeOptions
	#{
		-I$(LIB_SRC)/finiteVolume/lnInclude \
		-I$(LIB_SRC)/meshTools/lnInclude \
		-I$(LIB_SRC)/sampling/lnInclude \
		-I$(LIB_SRC)/TurbulenceModels/turbulenceModels/lnInclude \
		-I$(LIB_SRC)/TurbulenceModels/compressible/lnInclude \
		-I$(LIB_SRC)/lagrangian/basic/lnInclude \
		-I$(LIB_SRC)/lagrangian/intermediate/lnInclude \
		-I$(LIB_SRC)/lagrangian/spray/lnInclude \
		-I$(LIB_SRC)/lagrangian/distributionModels/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/specie/lnInclude \
		-I$(LIB_SRC)/transportModels/compressible/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/basic/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/thermophysicalProperties/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/reactionThermo/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/SLGThermo/lnInclude \
		-I$(LIB_SRC)/thermophysicalModels/chemistryModel/lnInclude \
		-I$(LIB_SRC)/radiationModels/lnInclude \
		-I$(LIB_SRC)/ODE/lnInclude \
		-I$(LIB_SRC)/regionModels/regionModel/lnInclude \
		-I$(LIB_SRC)/regionModels/surfaceFilmModels/lnInclude \
		-I$(LIB_SRC)/combustionModels/lnInclude \
		-I$(LIB_SRC)/dynamicFvMesh/lnInclude \
		-I$(LIB_SRC)/meshTools/lnInclude
	#};
	
	codeLibs
	#{
		-lturbulenceModels \
		-lcompressibleTurbulenceModels \
		-llagrangian \
		-llagrangianIntermediate \
		-llagrangianTurbulence \
		-llagrangianSpray \
		-lspecie \
		-lcompressibleTransportModels \
		-lfluidThermophysicalModels \
		-lthermophysicalProperties \
		-lreactionThermophysicalModels \
		-lSLGThermo \
		-lchemistryModel \
		-lradiationModels \
		-lODE \
		-lregionModels \
		-lsurfaceFilmModels \
		-lcombustionModels \
		-lfiniteVolume \
		-ldynamicFvMesh \
		-ltopoChangerFvMesh \
		-lfvOptions \
		-lmeshTools \
		-lsampling
	#};
	
	codeInclude
	#{
		//#include "anyThingYouNeed.H"
		#include "volFieldsFwd.H"
		#include "basicSprayCloud.H"
	#};
			
	codeData
	#{
		autoPtr<volScalarField> RMptr_;
		autoPtr<volScalarField> maxRefinementptr_;
	#};

	codeRead
	#{
		Info << "Creating RM and maxRefinement" << endl;
		if(!RMptr_.valid())
		{
			RMptr_.set
			(
				new volScalarField
				(
					IOobject
					(
						"RM",
						mesh().time().timeName(),
						mesh(),
						IOobject::NO_READ,
						IOobject::NO_WRITE
					),
					mesh(),
					dimensionedScalar("RM", dimensionSet(0,0,0,0,0,0,0), 0.0)	
				)
			);									
		}
		
		if(!maxRefinementptr_.valid())
		{
			maxRefinementptr_.set
			(
				new volScalarField
				(
					IOobject
					(
						"maxRefinement",
						mesh().time().timeName(),
						mesh(),
						IOobject::NO_READ,
						IOobject::NO_WRITE
					),
					mesh(),
					dimensionedScalar("maxRefinement", dimensionSet(0,0,0,0,0,0,0), 0.0)	
				)
			);									
		}
		
	#};
	
	codeExecute
	#{
		//- Write something to run every time step			
		volScalarField& RM_ = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("RM"));
		volScalarField& maxRefinement_ = const_cast<volScalarField&>(mesh().lookupObject<volScalarField>("maxRefinement"));
		
		basicSprayCloud& spray = dynamic_cast< basicSprayCloud&>(mesh().objectRegistry::lookupObjectRef<sprayCloud>(Foam::sprayCloud::typeName));			
		volScalarField localLVF_ = spray.theta()();
		const volScalarField& Z_ = mesh().lookupObject<volScalarField>("Z");
		const volVectorField& U_ = mesh().lookupObject<volVectorField>("U");
		volScalarField magUGrad_ = mag(fvc::grad(U_));
		
		scalar localLVF_minForRefine = 0.001; //K
		scalar Z_minForRefine = 0.0001; //K			
		scalar magUGrad_minForRefine = 100000;
			
		forAll(mesh().C(), celli)
		{
			RM_[celli] = 0;			
			if (Z_[celli] > Z_minForRefine || magUGrad_[celli] > magUGrad_minForRefine || localLVF_[celli] > localLVF_minForRefine)
			{
				RM_[celli] = 100;
			}
			else
			{
				RM_[celli] = 0;
			}
			 
			if (localLVF_[celli] > localLVF_minForRefine)
			{
				maxRefinement_[celli] = 3; // override default value for spray liquid region
			}	
			else
			{
				maxRefinement_[celli] = 2; // override default value for spray vapor region
			}			 
		}				

		Info<< "Update refinement field" << endl;
	#};

	codeWrite
	#{
		//- Write something to run every write time step
	#};
}